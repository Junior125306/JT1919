====================实用类====================
一、枚举的建立和使用？
特点：表示一组已经被固定的值
枚举定义
	public enum EnumTyme {
	
		A,B,C
		
	}

使用
  public class Dome1 {
	public static void main(String[] args) {
		EnumTyme s=EnumTyme.A;
		EnumTyme b=EnumTyme.B;
		switch (EnumTyme.A) {
		case A:
			break;
		case B:
			break;
		default:
			break;
		}
	}
  }
二、学习Java的实用类
	学习方法：
		1.确定这个类位于哪个包里？
		
		2.这个类的名称如何编写？
		
		3.考虑这个类常用的各种构造？
		
	//基本类型的使用
		int x=10;
		//重新赋值
		//使用
		没有任何属性和方法   针对自身的值是无法进行操作的
		符合引用类型除了可以表示自身这个值之外，家还具备操作这个值得很多属性和方法
	
1、所有的基本类型所对应得包装类
	Number 抽象类 是所有数值类型的抽象父类
		6种数值类型   4种整型 两种浮点型	
2、掌握各种包装类型中的构造方法以及一些常用的方法	
	所有的包装类 都可以	将与之对应的基本数据类型作为参数  来构造他们的实例
		int x=1;
		Integer a= new Integer(x);
		double y=2.0;
		Double v= new Double(y);
		char z='a';
		Character c= new Character(z);
	除Character类外   其他包装类可以将一个字符串作为参数来构造实例
	Integer a= new Integer("10");
	System.out.println(a+1);
		
	Boolean类构造方法参数为String类型时，若该字符串内容为true(不考虑大小写)，
	则该Boolean对象表示true，否则表示false	
		Boolean b=new Boolean("true");
		b=new Boolean("小明");
	 参数为true或者True时结果为true  其余的都是false
		
	当Number包装类构造方法参数为String 类型时，字符串不能为null，
	且该字符串必须可解析为相应的基本数据类型的数据，否则编译不通过，运行时会抛出NumberFormatException异常
	
	
		
	Float x=new Float("1F");
	Double x=new Double("1D");	//浮点型中可以在字符串总指定F|D
	Long l=new Long("1L");//在Long中不可以在字符串中指定类型  否则编译不通过，运行时会抛出NumberFormatException异常
		
=================包装类的操作方法		
	转换为基本类型
	byteVaule();		intVaule();
	longVaule();		shortVaule();
	doubleVaule();		floatVaule();
	booleanVaule();		charVaule();
	转换为包装类
	Integer.valueOf(基本类型)
	Integer.valueOf("6666")
	Boolean.valueOF("true")  非true都是false
	long型字符串不能带l
	double  和 float可以带f|d;
	Character没有支持字符串参数的形式
=================包装类的静态方法toString();适用于8种包装类型		
	String sex=Character.toString('男');
	String id=Integer.toString(25)
	Boolean.toString(true);
	Character.toString('a');
	
=================包装类的静态方法parseXXX();	
	int a= 	Integer.parseInt("123");
	System.out.println(a);
	boolean bool=Boolean.parseBoolean("false");
	
	
	long l= Long.parseLong("123L");//错误的  Long不能解析含有字符的字符串
	double d =Double.parseDouble("12D");
	float f=Float.parseFloat("123f");
	
	Character不具备Parse的转换方法
	
三、Java中的拆装箱机制

	在JDk1.5以前是需要手动拆装箱的操作，在以后都是内部自动实现拆装箱
		Integer a= new Integer(1);
		Integrand.nextGaussian()er b= new Integer(2);
		//在jdk1.5之前  ab 是不能直接运算的
		
		//在过去是这样处理的
		int sum=a.intValue()+b.intValue();
		//1.5以后自动进行拆装箱  可以这么运算
		int sum1=a+b;
	
	
四、Math类的学习	java.lang.Math类提供了常用的数学运算方法和两个静态常量E（自然对数的底数） 和PI（圆周率） 

		Math.abs(-3.5); //返回3.5
		Math.max(2.5, 90.5);//返回90.5
		int random = (int) (Math.random() * 10); //生成一个0-9之间的随机数

		int max=Math.max(Math.max(a,b),c)


五、随机数获取
	Random rand=new Random(); //创建一个Random对象
	for(int i=0;i<20;i++){//随机生成20个随机整数，并显示
	    int num=rand.nextInt(10);//返回下一个伪随机数，整型的   
		System.out.println("第"+(i+1)+"个随机数是："+num);
	} 
	
	rand.nextGaussian()查资料

六、String类  计算字符串的长度、比较字符串、连接字符串、提取字符串

	//创建一个字符串对象有如下几种方式
	//第一种
	String str1="admin";//放在字符串的常量池（不允许有重复的对象，如果相同进行共用）中的
	//以下的两种方式，创建出来的字符串都是产生在堆内存中的
	//第二种
	String str2=new String();
	//第三种
	String str3=new String("字符串内容");

length()方法获取长度
		String类提供了length()方法，确定字符串的长度

equals()方法

	String类提供了equals( )方法，比较存储在两个字符串对象的内容是否一致
 
使用equalsIgnoreCase()方法    忽略大小写
使用toLowerCase()方法  转换为小写
使用toUpperCase()方法  转换为大写

字符串连接
	使用String类的concat()方法
	

搜索第一个出现的字符ch（或字符串value），如果没有找到，返回-1
public int indexOf(int ch) 
public int indexOf(String value)

搜索最后一个出现的字符ch（或字符串value），如果没有找到，返回-1
public int lastIndexOf(int ch) 
public int lastIndexOf(String value)

提取从位置索引开始的字符串部分
public String substring(int index)

提取beginindex和endindex之间的字符串部分   半开半闭[x,y)
public String substring(int beginindex, int endindex)

返回一个前后不含任何空格的调用字符串的副本
public String trim()

.split() 分割字符串


===============StringBuffer类   StringBuilder类===============

在java语言中 能够表示出字符串对象的有标准的三个类

String：保存的字符串式不可修改的
	一下两种类的方法一模一样  区别是：
StringBuffer类：基于线程同步  适用与多线程环境
StringBuilder类：基于线程非同步  适用于单线程环境

	String sg="String";
	StringBuffer sb=new StringBuffer("StringBuffer");
	StringBuilder sbd=new StringBuilder("StringBuilder");

三个类都是final修饰的类

在String类中，存在一个char[]  value 使用的是final进行修饰，就无法实现动态数组
Sring应用场景  通常用于表示不会频繁发生  改变的字符串对象
StringBuffer类   StringBuilder类 可以对同一个对象进行内容的修改
通常用于频繁被改变的字符串对象中


		StringBuffer sb=new StringBuffer();//初始化十六个字符
//		StringBuffer sb=new StringBuffer(seq);
//		StringBuffer sb=new StringBuffer(32);//指定容量用于初始化进行
		StringBuffer sb=new StringBuffer("StringBuffer");

StringBuffer转换为String可以适用toString

===============日期类===============

	Date类：
		Date date =new Date();//系统当前的日期
		System.out.println(date);
		
		参数表示的毫秒数   new的Date是一个相对时间是以1970-01-01:00：80：00 标准基本时间
		Date date1 =new Date(2000);//系统当前的日期
		System.out.println(date1.toLocaleString());
		
		int year=date.getYear();从1900开始计算
		int month=date.getMonth();0-11
		int dd=date.getDate();
		.getTime 是long型
		
		Java中不同包的日期  
		java.util.Date{ new Date(long time)   date.getTime}
		java.sql.Date{new Date(long time)  getTime()  valueOf("日期")}   是util的子类
		
		java.sql.Date date=java.sql.Date.valueOf("2000-12-12");
		System.out.println(date.getYear()+1900);

		Date newDate=new Date(date.getTime) 转换类型

	日期格式化
		
		日期转化为字符串
		Date date = new Date();
		simpleDateFormat sf = new simpleDateFormat("yyyy-MM-DD");
		String dateStr=sf.format(date);
		System.out.println(dateStr);
		字符串转换日期
		simpleDateFormat sf = new simpleDateFormat("yyyy-MM-DD");
		Date date=sf.parse("2000-10-11");
		System.out.println(date.toLocaloString());
	
	Calendar c= Calendar.getInstance();
		System.out.println(c);
		
		//获取数据
		int year = c.get(Calendar.YEAR);
		System.out.println(year);
		int month = c.get(Calendar.MONTH);
		System.out.println(month+1);
		int day =c.get(Calendar.DAY_OF_MONTH);
		System.out.println(day);
		//星期几
		int weekday = c.get(Calendar.DAY_OF_WEEK);
		System.out.println(weekday-1);



