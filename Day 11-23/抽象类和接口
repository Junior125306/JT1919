一、抽象方法和抽象类？

      抽象方法：就是使用abstract进行修饰的方法，这种方法没有方法体。
  
      语法格式：方法的修饰符  abstract 数据类型|void  方法名称([参数列表...]);
     
      特点：抽象方法是没有方法体的，这种方法是不会直接进行使用的。
      
      那么抽象方法是用来干什么的？   如何进行使用？
      
             抽象方法就是在基类中只是进行功能的定义，无法实现。需要依赖具体的子类来进行完成。子类就是确定性的。
      
        ***** 一个类中只要含有抽象方法，那么这个类必须要声明为抽象类。       
        ***** 抽象类不一定含有抽象的方法。 
        ***** 抽象类是不能实例化的。           
    
          抽象类：首先是一个类，只不过这个类的信息是不足的，不能用来直接创建对象。只能是通过extends的方式进行扩展。    
          
          抽象类的特点：
          
          1、必须要使用abstract进行修饰。
          
          2、抽象类中不一定含有抽象的方法。但是含有抽象方法的类一定要声明为抽象类。
          
          3、抽象类是存在构造函数的，但是不能创建对象。
          
          4、抽象类最终使用的出路都是通过extends继承来实现的。
          
          5、抽象类中是可以定义静态方法，并且通过类名.进行使用。
          
          6、抽象类是不能使用final修饰符的。
            

二、内部类和匿名内部类？

          内部类：在一个类的内部定义的类，称为“内部类”。
         
                从语法上来讲，内部类可以定义在一个类内部的任意的位置。  
                
          内部类的特点：不同于普通的一般类，修饰符上发生了变化，可以使用的修饰符有：
          public 、 缺省 、 protected 、 private 、 static 、    abstract 、final   类似于方法的修饰符  
          
         内部类的作用：就是在一个类的内部提供局部性的服务。           
          
         匿名内部类： 没有名字的内部类。
        
              针对一个普通的类进行使用的时候，  其实创建的是这个普通的类的没有名字的子类的对象。（可以有选择性的重写类中的方法，进行使用。而不会影响到父类原来的做法）
        
              针对抽象类进行使用的时候，其实创建的就是抽象类的一个没有名字的子类的对象（必须要完成抽象类中定义的所有的抽象方法）。
              
              针对接口进行使用的时候，其实创建的是接口的一个没有名字的实现类的对象（要求实现接口中相应的抽象方法）。        

三、接口？ 

        定义：接口是空洞的，只有功能的定义没有任何的实现。全部都是抽象方法和常量。接口都是用于定义规则的。
        
        接口 = 常量 + 抽象方法
        
        定义接口的语法：  修饰符  interface  接口名称{}   
        
        修饰符：public  缺省 
    
        接口中常量的修饰符默认为：public  static final   一般都进行省略
        
        接口中抽象方法的修饰符默认为：public  abstract    一般都进行省略
        
        可以发现，接口都是空洞的，没有任何实质性的内容，都是通过  实现类 来完成。  implements 关键字
        
       注意：
        1、接口和接口之间可以进行继承,并且支持多重继承。   
        2、对于类而言：只能支持单继承，但是可以支持多实现。     
        3、 一个实现类实现了一个指定的接口，那么就会毫无条件的共享这个接口中的所有的常量。
        4、接口是没有所谓的构造。
     
