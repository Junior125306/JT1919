===========================面向对象===============================

一、何为面向对象？

       万事万物皆对象
       
       对象的来源是基于类 class。

       面向对象-------对象--------类-------研究如何创建出对象
       
       如何面向对象？
       
       面向墙壁-------墙壁.......
       
       总结结论：
       
        研究java中类-------产生出-------对象--------面向对象。
        
二、Java中的类？

       1、类的定义：就是一系列具体的事物（对象）的共性（特征、行为）的抽象描述。类具有抽象性。
       
            公式：类 = 特征 +  行为
            
              java程序中：  class = 属性 +  方法
       
       2、如何定义类：
       
            语法格式：
            
            类的修饰符  class   类名称 {
              
                    类的主体部分...（属性 +  方法）
              }
              
           在java有哪些类的修饰符？
           
             a、public：公共的。在整个项目的范围内，都可以自由的访问。
             
             b、缺省：默认，什么都不写。只能在同一个包下进行访问。
             
           注意：以上的两个修饰符都是表示控制访问范围的（访问权限控制的修饰符）。
             
             c、abstract：抽象的。用来创建抽象类的。
             
             d、final：最终的，修饰的类是不能被继承的。就是阻止类被继承。
             
             比如：String类，内部就是使用final来进行修饰的，表示这个类是一个最终的类。不能被继承（扩展）。
             
           注意：以上的这2个修饰符表示的是一种特殊的含义。
             

三、如何通过类创建出对象？

          类 ------构造方法（函数）------对象
          
          提示！ 基于一个类可以创建出N多个不同的对象。每个对象是相互独立的。
          
            Person   person = new  Person();
            
          其中出现了一个new关键字:
            
            1、表示在计算机的内存中进行空间的开辟。
            
            2、new是用来调用类中的相应的构造函数的。
            
            
          构造函数的特点：
          
              1、构造方法就是用于创建出类的对象的。
              
              2、构造方法还可以针对这个对象进行初始化（赋值）。
              
              3、构造方法的名称永远都是和类名保持一致的。
              
              4、构造方法是没有所谓的返回类型的说法。连void都没有。
              
              5、构造方法再特殊，也是一个方法。
              
              
          注意：
          
	          1、在一个类中，如果没有手动定义任何的构造的情况下，系统会默认一个无参数的构造。
	          一旦进行手动定义，则系统不会默认那个无参数的构造了。
	          
	          2、在一个类中可以同时存在N个构造。表示对对象不同程度的初始化。
	          
	          3、在一个类中N个不同的构造方法，就形成了方法的重载。也就是说，在一个类中的不同构造方法就是最为典型的方法的重载。
            
            
         方法的重载？
         
                在同一个类中一系列方法名称相同，参数列表不同（体现为：参数的个数不同、参数的类型不同、参数的顺序不同）的方法，称为“方法的重载”。
           
         重载的意义？
         
               针对同一种功能，为了满足外界灵活多变的需求。
               
                       
          
          准备知识：全局变量  和  局部变量。
          
          变量可以分为：全局 和  局部。
          
            全局变量：在方法体或者语句块之外、类体之中的位置定义的变量就是“全局变量”。【之间不能重名】
            
                  作用范围：针对整个类体部分有效。
            
            局部变量：在方法体或者语句块中定义的变量称为“局部变量”。【之间不能重名】   
            
                  作用范围：针对当前方法或者语句块有效。 
                  
                  注意：方法的参数列表中的变量，都是属于局部变量。
           
           
        过渡：如果成员变量（全局变量） 和 局部变量重名了，怎么办？    
               
          this关键字的含义及作用？
          
             this关键字：
             
                 this只能使用在非静态的方法或者语句块中。表示的是当前类的对象，而且是一个变量。
                 
             this关键字的作用：
              
                  1、用于区分成员变量和局部变量重名的情况。
              
                  2、用于方法的简化调用。
                  
                       通过this关键字进行方法的互调。
                  
                  3、用于进行构造的互调。
                  
                       是通过this([参数列表....]);  注意：只能是在第一行。
                 
           this使用的注意事项：
            
                  【this只能使用在非静态的方法或者语句块中。】
                  
                  
          super关键字?   ？？？？？？？？？？？？？？？？？
          
          
        何为语句块或代码块？
        
            就是在类中直接通过{} 进行定义的语法，就是代码块。
            
            执行的原理：在适当的时机进行自动的执行。
            
              1、非静态的代码块，是在创建类的对象的时候自动执行，主要是用于进行实例变量的初始化。以及为实例方法做一些准备工作。

	      2、静态代码块，实在类加载的时候自动执行，主要是用于进行静态变量的初始化，以及为静态方法做一些提前的准备工作。
    
        
        
类 =  属性  +  方法
        
        
        属性的修饰符？
        
             属性：就是在类中直接定义的变量。表示的是事物的特征。
             
                语法格式：
                
                   属性修饰符  数据类型  属性名称 [ = 值]; 
                   
                
                属性（全局变量）有哪些修饰符：
        
          
        1、public ：公共的。
                   
        2、缺省：在同一个包下可以自由访问。
                   
        3、protected:受保护的，a、在同一个包下可以自由访问。  b、具有父子关系的子类中可以访问（不管是否在同一个包）。
                   
        4、private：私有的，只能在同一个类中访问。
                   
                    以上修饰符都是访问权限的控制。这些修饰符是不能配合使用的。
                
        5、static ：静态的，表示的是这个属性是属于类的。被所有的对象共享。
                   
                      使用静态的优势：
                                                    
                           被所有的对象所共享的属性，我们都可以通过定义static的方式来实现。这样就会将属性在方法区中保存一份。被大家共享，充分的节约了内存资源。 
                           不会在堆内存中随着对象的创建而产生出多份address的变量。                       
                                                    
                     使用静态的劣势：         
                                                                       
                            非静态的变量的声明周期会比静态的变量的声明周期短。 
                                                                       
                     附加内容【属性的生命周期】:
                     
                            属性就是变量
			    
			    变量的分类?

			       全局变量：

			            类变量：所有的静态的成员变量称为“类变量”。

				    实例变量：所有非静态的成员变量称为“实例变量”。

			       局部变量：局部变量能使用的修饰符只有final。
                   

                                               
                   语法：权限修饰符 + static   数据类型    变量名称 [=值];
                   
        6、final ：最终的，表示是一个常量，必须要手动赋值。
                   
                   
        
        方法的修饰符？
        
               方法：就是在类中直接定义的方法。表示的是事物的功能。
        
               语法格式：
                
                 方法的修饰符  数据类型|void   方法名称(参数列表){  方法体 .....  }
                 
                 
                方法的修饰符有哪些？
                 
                   1、public ：共有的。
                   
                   2、缺省：在通过一个包下可以自由的访问。
                   
                   3、protected：受保护的，a、在同一个包下可以自由访问。  b、具有父子关系的子类中可以访问（不管是否在同一个包）。
                   
                   4、private：私有的，只能在通过一个类中进行访问。
                   
                   以上修饰符都是访问权限的控制。
                
                   5、static：静态的。
                   
                   6、final：最终的，可以被继承，但是不能被重写（改写|覆写）。？？？
                   
                   7、synchronized：同步。java对线程  ？？？？
                   
                   8、native：本地的。修饰的方法，不是使用java程序实现的。
                   
                   9、abstract：抽象的，修饰的方法表示是一个抽象方法。？？？？？？
                   

四、如何使用对象？

     通过类创建出来的是一个模板。具有抽象性。

     对象就是类的具体化。

     在类中定义的属性和方法，只有2个去处：

     1、属于类本身的（所有的静态的）。

     2、属于具体的对象的（所有的非静态的）。

     类 --- 构造 ----对象

     使用对象的时候，就是在使用类中定义过的那些属性 和 方法。

--------------------------------------------------------------------------------------------------
       ============================封装和继承===============================
       
一、封装？   

      概念：就是将指定的内容（类、接口....方法）进行固定的一个隐藏。保持一定的独立性。
      
                封装具体体现为：
          
          1、一个项目project在封装多个package包，在包中我们封装类各种类、接口...等。在类中封装属性和方法。方法中封装代码。  
          
          2、在开发的过程中，将一些公共的代码进行提取，定义为一些类，在类中以方法的形式存在。
              
    注意！封装的使用不仅仅是体现在代码的层面，会体现在设计的各个方方面面。比如保持系统的相对独立性，重用性。 

二、继承？

   1、何为继承：
   
            同现实生活中一样，继承就是将父亲的东西继承到儿子这里。
     
            在程序中，父亲和儿子 其实都是 类class。父亲就称为“父类” ， 儿子称为“子类”。
            
            如果想实现继承的关系可以使用extends关键字来实现。那么子类中就可以拥有父类中【可以被拥有】的属性和方法。
            
   2、继承的语法实现：
   
     class  子类名称   extends  父类名称{
        .............
     }
     
           注意：子类继承了父类，将父类中可以被继承的属性和方法拿到子类中了。父类中使用的不同修饰符，可以进行属性和方法的保留。
       
     a、private修饰的属性和方法是不能被继承的。
     
     b、protected修饰的属性和方法时可以被继承的（哪怕是跨包的情况下）。      
     
     
           使用继承后，与构造函数的关系：super关键字
      
           自定义的任意的一个类或者是Java中的任意的一个类，如果没有直接使用extends关键字的情况下，默认的是extends Object。
           
     Object是java内部提供的一个描述所有的对象的类。 Object类被称为“祖先类”。所有的类都是直接或者间接性的继承了Object类。
     
     super关键字的含义：
     
        2.1、super就是用于具有父子关系的场景之中。
        
        2.2、super就是在子类中调用父类中相应的构造方法。
        
        2.3、super可以访问父类中的属性。
        
        2.4、super可以访问父类中的方法。
        
        2.5、super是不能使用在静态的方法或者语句块中的。
        
        
        学会进行this  和    super   的对比学习。
        
   super表示的是父类的一个引用。
        
        使用场景 ： 调用构造 、 访问属性 、 调用方法
        
        注意：在继承的过程中，子类是依赖了相应的父类中对应的构造的。 是实现父类的初始化，但是不会生成父类的对象。   
        
          
   3、谈谈继承的优势：
   
        提高代码的复用性    
        
   4、继承的劣势：
   
       增强了程序的耦合性    
       
       注意：在java程序中，类的继承只支持单根继承。   （一个儿子同时只能有一个父亲）。
       
       
 5、所谓方法的重写？
   
      面向对象存在最为显著的三大特征：继承、封装、多态。
      
      多态性其实就体现为方法的重载和方法的重写。 
      
      方法的重载：  
           在同一个类中，方法名称相同，参数列表不同（顺序、个数、类型）的一系列方法，称为方法的重载，构造函数就是典型的方法重载。   
      方法的重写：      
           在具有继承关系的类之间，方法名称相同，参数列表相同的一系列方法称为“方法的重写”。 （同样的功能，在子类中需要有不同的做法）。    
   
     方法重写的注意事项（原则）：
   
   a、一定是具有父子关系的类，才能谈方法的重写。
   
   b、重写发生的前提是方法必须要能够继承过来。（注意：构造方法是不能继承的）。更不能谈重写了。
   
   c、静态的方法是属于类的，所以没有重写这一说。只能覆盖（屏蔽）。
   
   d、重写后的方法不能缩小访问权限（可以相同或者扩大）。
   
   e、重写后的方法不能产生出更为严格的异常。
   
   
 6、对象的造型（本质上就是对象的强制转换）
 
     //人  是  人
     Person  person = new  Person(); 
     
     //学生  是  学生
     Student  student = new Student();
 
     //在建立了继承关系的情况下
 
     // 学生  是  人
     Person  per = new  Student();
     
     Student  student = (Student)per;
 
=================================================阶段总结===============================================================

1、如何比较完美的创建出一个类？
  
     类 = 属性  + 方法
  
	    类的修饰符:........
	    属性的修饰符：......
	    
	          属性就是变量，存在一些分类：
	          
	          全局（成员）变量：public、缺省、protected、private，static、final
	          
	                   全局(成员)变量分类：
	                         类变量：所有static修饰的成员属性。
	                         实例变量 ：所有的非静态的成员属性。  	                      
	          
	          局部变量：只能使用final
	          
	    方法的修饰符  :  ...... 
	    
	    方法的定义格式： 方法修饰符   数据类型|void  方法名称([参数列表....]){方法体部分}
	    
	    方法定义的分类：
	    
		    无返回值+无参数的方法
		    public  void  m1(){}
		    
		   有返回值+无参数的方法
		    public  int   m2(){....return 值}
		    
		   无返回值+有参数的方法
		    public  void  m3(String name,int  age){}
		    
		   有返回值+有参数的方法
		  
		    public  int  m4(String name,int  age,char  sex){....return 值}        
    
	 静态方法的调用 ：方法的修饰符上使用static
		    
		    [返回类型  变量 =]    类名.静态方法名称([实际参数....]);  
		    
		    [返回类型  变量 =]    对象.静态方法名称([实际参数....]);
		      
           非静态方法调用：没有使用static
           
            [返回类型 变量 =]  对象.非静态方法名称([实际参数....]);
    
      
 2、在定义类的过程中可以使用封装的思想？
 
            在定义类的时候，将所有的属性定义为private的，配备上public的set 和  get方法，用于给私有的属性赋值 和 取值。
            
             
 过渡提示：仅仅只是有类是远远不够的，我们需要的是【对象】。
 
 
3、如何通过类创建出对象？-----构造函数。
 
        构造函数的作用： 创建对象 + 初始化。
        
        定义构造函数的规范：
        
       1、构造函数（方法）是一种特殊的方法。
       
       2、构造函数是没有所谓的返回值的概念，连void都没有。
       
       3、构造函数的名称永远都和类名是一致的。
       
       4、构造都是通过new关键字来进行调用。（对于具有继承关系的类，可以通过super来调用父类的构造，对父类进行初始化，并不会生成父类的对象）。
       
       5、一个类中的多个构造函数，就是最为典型的方法的重载。
       
       6、类的构造是永远不能继承的，所以也就不能进行重写。     
 
4、类可能不是全部独立的，可以构建一些关系---继承？ 

    a、继承的作用：就是为了提高代码的复用性。
    
    b、继承的定义语法：使用extends关键字。
    
    c、继承并不是全部性的，可以有所保留（取决于父类中的一些修饰符）。
    
    d、构造函数是不能被继承的。
    
    e、final修饰的类是不能被继承的。
    
    f、final修饰的属性和方法都是可以被继承，只是不能改。
    
 继承的本质：就是将多个不同的类的共性进行抽取，定义为一个基础的类，并作为父类的形式而存在。子类们通过继承的方式来进行使用。   
 
 继承存在很明显的缺点：就是耦合性太强。不利于解耦。 
 

5、面向对象最为显著的三大特征---多态性？

    多态性体现为：方法的重载和重写。
    
    方法重载：
    
    方法重写：
    
    构建了继承关系的前提下：
    Person  per = new Person();
    
    Student  stu = new Student();
    
    //发生了变化
    Person  per = new  Student(); // 儿子充当父亲去使用。
    
    Student  stu = (Student)per;
    
         意义：在不修改父类的情况下，可以在各个子类中进行方法功能的重新定义。
          
======================================================================================================================

一、Object类中几个常见的方法？

     equals()：完毕！
     
     toString()???????????????????

二、equals方法和==的区别？

   == :在java程序中具有2层含义：
   
     1、左右是基本类型的话，进行的是判断大小是否相等或一致。
     
     2、如果左右是对象的话，表示的是判断对象的地址是否相同。
     
   equals(obj)方法：
   
     1、在Object类中equals方法表示的是内存地址的比较。
     
     2、在其它的类中，取决于内部是否进行了重写与否。没有重写实现的是地址的比较，重写了就是重写的比较方式。
    
         注意：String类是重写了Object类中的equals方法的，实现的是对象的内容的比较。
        

三、instanceof的使用？
    
         动态的检测一个对象所属的类型：参考com.it.www.oop4包

四、补充多态的运用？  

        参考com.it.www.oop5包
   

----------------------------------------抽象类和接口---------------------------------------

一、抽象方法和抽象类？

      抽象方法：就是使用abstract进行修饰的方法，这种方法没有方法体。
  
      语法格式：方法的修饰符  abstract 数据类型|void  方法名称([参数列表...]);
     
      特点：抽象方法是没有方法体的，这种方法是不会直接进行使用的。
      
      那么抽象方法是用来干什么的？   如何进行使用？
      
             抽象方法就是在基类中只是进行功能的定义，无法实现。需要依赖具体的子类来进行完成。子类就是确定性的。
      
        ***** 一个类中只要含有抽象方法，那么这个类必须要声明为抽象类。       
        ***** 抽象类不一定含有抽象的方法。 
        ***** 抽象类是不能实例化的。           
    
          抽象类：首先是一个类，只不过这个类的信息是不足的，不能用来直接创建对象。只能是通过extends的方式进行扩展。    
          
          抽象类的特点：
          
          1、必须要使用abstract进行修饰。
          
          2、抽象类中不一定含有抽象的方法。但是含有抽象方法的类一定要声明为抽象类。
          
          3、抽象类是存在构造函数的，但是不能创建对象。
          
          4、抽象类最终使用的出路都是通过extends继承来实现的。
          
          5、抽象类中是可以定义静态方法，并且通过类名.进行使用。
          
          6、抽象类是不能使用final修饰符的。
            

二、内部类和匿名内部类？

          内部类：在一个类的内部定义的类，称为“内部类”。
         
                从语法上来讲，内部类可以定义在一个类内部的任意的位置。  
                
          内部类的特点：不同于普通的一般类，修饰符上发生了变化，可以使用的修饰符有：
          public 、 缺省 、 protected 、 private 、 static 、    abstract 、final   类似于方法的修饰符  
          
         内部类的作用：就是在一个类的内部提供局部性的服务。           
          
         匿名内部类： 没有名字的内部类。
        
              针对一个普通的类进行使用的时候，  其实创建的是这个普通的类的没有名字的子类的对象。（可以有选择性的重写类中的方法，进行使用。而不会影响到父类原来的做法）
        
              针对抽象类进行使用的时候，其实创建的就是抽象类的一个没有名字的子类的对象（必须要完成抽象类中定义的所有的抽象方法）。
              
              针对接口进行使用的时候，其实创建的是接口的一个没有名字的实现类的对象（要求实现接口中相应的抽象方法）。        

三、接口？ 

        定义：接口是空洞的，只有功能的定义没有任何的实现。全部都是抽象方法和常量。接口都是用于定义规则的。
        
        接口 = 常量 + 抽象方法
        
        定义接口的语法：  修饰符  interface  接口名称{}   
        
        修饰符：public  缺省 
    
        接口中常量的修饰符默认为：public  static final   一般都进行省略
        
        接口中抽象方法的修饰符默认为：public  abstract    一般都进行省略
        
        可以发现，接口都是空洞的，没有任何实质性的内容，都是通过  实现类 来完成。  implements 关键字
        
       注意：
        1、接口和接口之间可以进行继承,并且支持多重继承。   
        2、对于类而言：只能支持单继承，但是可以支持多实现。     
        3、 一个实现类实现了一个指定的接口，那么就会毫无条件的共享这个接口中的所有的常量。
        4、接口是没有所谓的构造。
 

梳理内容==============>>>>>>>>===================

1、基本类型可以作为变量的定义类型：int x; char  sex; double salary;  ......

2、String  name; 使用String作为变量的类型。   String是一个类，代表的是复合引用类型。

3、int[]  is;  String[]  names; ........ 复合引用类型。

4、产生了大量的自定义的类型（Person 、 Student 、 Dog ...... ）。  其实这些都是我们自定义的class。

5、抽象类也可以作为变量的类型。 abstract class Animal 。   Animal  an = new 子类()。

6、接口interface也可以作为类型：  interface A 。     A  a = new  实现类();

 
补充内容=================面向对象===================== 

一、组合？

        组合其实就在一个类中，定义一个成员变量，这个变量是一个自定义类型的引用。那么在这个类中就可以直接使用引入的这个对象中可以使用的成员。
        
        组合和继承的对比:
   
      1、组合没有继承的耦合性那么强。
      
      2、组合一般用于具有关联的类。
      
      3、具有很强的层级关系建议还是使用继承来进行表示。
      
二、标准的JavaBean？

          什么是JavaBean？
                咖啡豆：就是一个类。
    
          标准的JavaBean？     
               在JavaBean的基础之上加入了一些限制条件（规则）。
               
      1、类中的所有属性全部都是私有的。
      
      2、每一个属性都对应了一组set 和 get方法，并且是public修饰的。
      
      3、这类至少配备有一个无参数的构造 和 一个全部带参数的构造。
      
      4、所有的属性的名称首字母一定是小写的。
      
    注意：标准的javabean是实现Java的反射机制最为基础的条件。反射机制依赖于标准JavaBean的规范。  
      
三、单例（单态）模式？

   单例模式是java 23种设计模式中的一种：
   
         单例模式：就是在程序中多次获取同一个类的实例，得到的是同一个对象。        
         优势：节约内存空间。
  
  单例模式的设计方案（2种）：
    
         见com.it.www.oop2包下
         第一种：饿汉式
         第二种：懒汉式  
         
============================================总结=================================================    
 
一、会定义一个比较合理的类？

           类 、 属性 、 方法 、代码块 、构造
           
二、 对象及对象的使用？

       类 -- 构造 ---对象

      对象中所具备的属性和方法都是来自于类的，它们的使用方式和具体使用的修饰符是有很大关系的。
   
       static：内存的分布情况，及访问和调用情况。
   
                 非static：内存的分布情况，及访问和调用情况。
                
   this关键字的使用。
  
   
三、抽象方法及抽象类？

      抽象方法：
      
      抽象类：
      
      抽象类的特点：    
      
      抽象类和抽象方法之间的关系：    
      
      
     普通类就是将一组对象的相似属性和方法进行抽取。   
     抽象类更多的是用于处理具有共性的类的抽取。作为基类而存在。
     
     总结：抽象类也是一种类型，并且是复合引用类型。
     
     a、抽象类可以继承抽象类吗？          
                  可以的。抽象类可以容纳任意的方法。
     b、抽象类可以继承普通类吗？
                 可以的，继承了一些可用的方法和属性。
     c、普通类可以继承抽象类吗？
                 可以的，必须要实现所有的抽象方法。
                 
四、封装、继承、多态？

       1、封装：
       
       2、继承：
       
                       继承的实现和相关的注意事项（优劣势）。
          
          super关键字的使用
          
       3、多态 ：
                     
                        重载
                        重写 、 重写的注意事项                
                        对象的造型（向上转型、向下转型）   
             
五、接口？

       1、使用接口的目的意义：
       
       2、接口的定义语法格式：
       
       3、接口之间是可以支持多重继承的。
       
       4、接口的特点：  没有构造 、....
       
   注意：接口也是一种复合引用类型，接口都是通过实现类来进行实现的。 
   

   类 、 抽象类 、 接口==========================
    
         类 继承  抽象类的。
         
         类 继承 类 的。     
 
         抽象类 继承 类的。
         
         抽象类  继承 抽象类的。 
         
         接口  多重继承  接口         
 
         类  实现  接口(多重)
    
         抽象类  实现  接口（多重）
    
