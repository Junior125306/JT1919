===========================面向对象===============================

一、何为面向对象？

       万事万物皆对象
       
       对象的来源是基于类 class。

       面向对象-------对象--------类-------研究如何创建出对象
       
       如何面向对象？
       
       面向墙壁-------墙壁.......
       
       总结结论：
       
        研究java中类-------产生出-------对象--------面向对象。
        
二、Java中的类？

       1、类的定义：就是一系列具体的事物（对象）的共性（特征、行为）的抽象描述。类具有抽象性。
       
            公式：类 = 特征 +  行为
            
              java程序中：  class = 属性 +  方法
       
       2、如何定义类：
       
            语法格式：
            
            类的修饰符  class   类名称 {
              
                    类的主体部分...（属性 +  方法）
              }
              
           在java有哪些类的修饰符？
           
             a、public：公共的。在整个项目的范围内，都可以自由的访问。
             
             b、缺省：默认，什么都不写。只能在同一个包下进行访问。
             
           注意：以上的两个修饰符都是表示控制访问范围的（访问权限控制的修饰符）。
             
             c、abstract：抽象的。用来创建抽象类的。
             
             d、final：最终的，修饰的类是不能被继承的。就是阻止类被继承。
             
             比如：String类，内部就是使用final来进行修饰的，表示这个类是一个最终的类。不能被继承（扩展）。
             
           注意：以上的这2个修饰符表示的是一种特殊的含义。
             

三、如何通过类创建出对象？

          类 ------构造方法（函数）------对象
          
          提示！ 基于一个类可以创建出N多个不同的对象。每个对象是相互独立的。
          
            Person   person = new  Person();
            
          其中出现了一个new关键字:
            
            1、表示在计算机的内存中进行空间的开辟。
            
            2、new是用来调用类中的相应的构造函数的。
            
            
          构造函数的特点：
          
              1、构造方法就是用于创建出类的对象的。
              
              2、构造方法还可以针对这个对象进行初始化（赋值）。
              
              3、构造方法的名称永远都是和类名保持一致的。
              
              4、构造方法是没有所谓的返回类型的说法。连void都没有。
              
              5、构造方法再特殊，也是一个方法。
              
              
          注意：
          
	          1、在一个类中，如果没有手动定义任何的构造的情况下，系统会默认一个无参数的构造。
	          一旦进行手动定义，则系统不会默认那个无参数的构造了。
	          
	          2、在一个类中可以同时存在N个构造。表示对对象不同程度的初始化。
	          
	          3、在一个类中N个不同的构造方法，就形成了方法的重载。也就是说，在一个类中的不同构造方法就是最为典型的方法的重载。
            
            
         方法的重载？
         
                在同一个类中一系列方法名称相同，参数列表不同（体现为：参数的个数不同、参数的类型不同、参数的顺序不同）的方法，称为“方法的重载”。
           
         重载的意义？
         
               针对同一种功能，为了满足外界灵活多变的需求。
               
                       
          
          准备知识：全局变量  和  局部变量。
          
          变量可以分为：全局 和  局部。
          
            全局变量：在方法体或者语句块之外、类体之中的位置定义的变量就是“全局变量”。【之间不能重名】
            
                  作用范围：针对整个类体部分有效。
            
            局部变量：在方法体或者语句块中定义的变量称为“局部变量”。【之间不能重名】   
            
                  作用范围：针对当前方法或者语句块有效。 
                  
                  注意：方法的参数列表中的变量，都是属于局部变量。
           
           
        过渡：如果成员变量（全局变量） 和 局部变量重名了，怎么办？    
               
          this关键字的含义及作用？
          
             this关键字：
             
                 this只能使用在非静态的方法或者语句块中。表示的是当前类的对象，而且是一个变量。
                 
             this关键字的作用：
              
                  1、用于区分成员变量和局部变量重名的情况。
              
                  2、用于方法的简化调用。
                  
                       通过this关键字进行方法的互调。
                  
                  3、用于进行构造的互调。
                  
                       是通过this([参数列表....]);  注意：只能是在第一行。
                 
           this使用的注意事项：
            
                  【this只能使用在非静态的方法或者语句块中。】
                  
                  
          super关键字?   ？？？？？？？？？？？？？？？？？
          
          
        何为语句块或代码块？
        
            就是在类中直接通过{} 进行定义的语法，就是代码块。
            
            执行的原理：在适当的时机进行自动的执行。
            
              1、非静态的代码块，是在创建类的对象的时候自动执行，主要是用于进行实例变量的初始化。以及为实例方法做一些准备工作。

	      2、静态代码块，实在类加载的时候自动执行，主要是用于进行静态变量的初始化，以及为静态方法做一些提前的准备工作。
    
        
        
类 =  属性  +  方法
        
        
        属性的修饰符？
        
             属性：就是在类中直接定义的变量。表示的是事物的特征。
             
                语法格式：
                
                   属性修饰符  数据类型  属性名称 [ = 值]; 
                   
                
                属性（全局变量）有哪些修饰符：
        
          
        1、public ：公共的。
                   
        2、缺省：在同一个包下可以自由访问。
                   
        3、protected:受保护的，a、在同一个包下可以自由访问。  b、具有父子关系的子类中可以访问（不管是否在同一个包）。
                   
        4、private：私有的，只能在同一个类中访问。
                   
                    以上修饰符都是访问权限的控制。这些修饰符是不能配合使用的。
                
        5、static ：静态的，表示的是这个属性是属于类的。被所有的对象共享。
                   
                      使用静态的优势：
                                                    
                           被所有的对象所共享的属性，我们都可以通过定义static的方式来实现。这样就会将属性在方法区中保存一份。被大家共享，充分的节约了内存资源。 
                           不会在堆内存中随着对象的创建而产生出多份address的变量。                       
                                                    
                     使用静态的劣势：         
                                                                       
                            非静态的变量的声明周期会比静态的变量的声明周期短。 
                                                                       
                     附加内容【属性的生命周期】:
                     
                            属性就是变量
			    
			    变量的分类?

			       全局变量：

			            类变量：所有的静态的成员变量称为“类变量”。

				    实例变量：所有非静态的成员变量称为“实例变量”。

			       局部变量：
                   

                                               
                   语法：权限修饰符 + static   数据类型    变量名称 [=值];
                   
        6、final ：最终的，表示是一个常量，必须要手动赋值。
                   final修饰表示一个常量：1、必须要手动赋值    2、名称大写    3、不能再次修改
                   
        
        方法的修饰符？
        
               方法：就是在类中直接定义的方法。表示的是事物的功能。
        
               语法格式：
                
                 方法的修饰符  数据类型|void   方法名称(参数列表){  方法体 .....  }
                 
                 
                方法的修饰符有哪些？
                 
                   1、public ：共有的。
                   
                   2、缺省：在通过一个包下可以自由的访问。
                   
                   3、protected：受保护的，a、在同一个包下可以自由访问。  b、具有父子关系的子类中可以访问（不管是否在同一个包）。
                   
                   4、private：私有的，只能在通过一个类中进行访问。
                   
                   以上修饰符都是访问权限的控制。
                
                   5、static：静态的。
                   
                   6、final：最终的，可以被继承，但是不能被重写（改写|覆写）。？？？
                   
                   7、synchronized：同步。java对线程  ？？？？
                   
                   8、native：本地的。修饰的方法，不是使用java程序实现的。
                   
                   9、abstract：抽象的，修饰的方法表示是一个抽象方法。？？？？？？
                   
	//使用static的内存本质变化====================
	/**
	 * 总结:
	 * 
	 * 1、f1就是一个static修饰的变量，也称为静态变量|类变量，它是属于类的。而不是某一个对象的。
	 * 
	 * 2、f2是一个非静态的变量，它会随着对象的创建而创建（多份）。是属于不同的对象的。各自保持独立。
	 * 
	 * 3、类变量的生命周期，是在类进行加载的时候，就开始创建，直到类被卸载的时候，才死亡。
	 * 
	 * 4、实例变量的生命周期，是在创建类的对象的时候，开始创建，直到对象销毁的时候，才死亡。
	 * 
	 * java类（保存在硬盘上的）------ 类加载过程（JVM类加载器）-----加载到JVM中-----创建对象-----使用对象 ------销毁对象---------卸载类
	 *                           类变量创建                                                                      实例变量产生                                   实例变量销毁            类变量销毁
	 *                           
	 * 类变量的生命周期>实例变量的生命周期                           
	 *  
	 */
	
	//使用static的表象变化======================
	
	/**
	 * 针对静态的方法或者属性进行访问的时候，可以有2种方式：
	 * 
	 *     第一种方式：类名.属性|方法  进行访问。
	 *     
	 *     第二种方式：首先创建类的对象obj， 再通过obj.属性名  或者  obj.方法名()进行调用。
	 *     
	 * 针对非静态的方法或者属性进行访问的时候，只有唯一性的一种方式：
	 * 
	 *     必须首先创建类的对象obj， 再通过obj.属性名  或者  obj.方法名()进行调用。
	 * 
	 * 
	 */
四、如何使用对象？

     通过类创建出来的是一个模板。具有抽象性。

     对象就是类的具体化。

     在类中定义的属性和方法，只有2个去处：

     1、属于类本身的（所有的静态的）。

     2、属于具体的对象的（所有的非静态的）。

     类 --- 构造 ----对象

     使用对象的时候，就是在使用类中定义过的那些属性 和 方法。









