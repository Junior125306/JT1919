
      char类型：字符型------>'男'  ...... 
      
      boolean类型：  true  | false 
      public class Demo2 {
	
	数据类型的转换方式：
      
      1、自动转换：低级类型 自动 提升为 高级类型。
      
      2、强制转换：高级类型  强制 转换为 低级类型。
      
             语法格式为：  类型    变量名称 = （目标类型）（值）;

      byte <short (char)<int<long<float<double
       由低级---------------------->高级  的 序列 ，与boolean类型无关。
	public static void main(String[] args) {
		
		//整数 系列=====
		byte   a = 1; //8位  范围：-128~127 -2的8-1次方到2的8-1次方-1  256个值  2的8次方个值
		
		short  b = 1; //16位
		
		int    c =1;  //32位
		
		long  d = 1;  // 64位
		
		System.out.println(a+"---"+b+"---"+c+"---"+d);
		
		/**
		 * 四种整数类型的区别 ？
	     * 1、各自的表数范围是不同的。
		 * 2、每种类型所占用的计算机的内存空间是不同的。
		 */
		//byte：-128~~~127        256个值    byte(8位)     2的8次方=256
		//   -2的8-1次方~~~~ 2的8-1次方-1    
		//byte  x = 128;  超出范围
        byte  myValue = 10;
        
        int    x = 20;
        //内部发生的是自动转换
        int  sum = myValue+x;  //变量代表的是一种类型。
        
        //由高级的类型转换为低级的类型，可以使用强制转换。
        byte  sum1 = (byte) (myValue+x);
        
        System.out.println(sum1);
        
        /**
         * 注意：强制转换是有风险的。可能导致数据发生变化。
         */
        
        byte  a1 = (byte) 128;
        System.out.println(a1);
        
        //得出一个结论：在使用强制转换的过程中，我们都是保证数值不变的情况，让其类型进行转换。		
	}
}
###############################浮点型
package com.it.www.test;
/**
 * 浮点型的使用（float单精度 32位  <   double双精度 64位）
 * @author Administrator
 *
 */
public class Demo3 {
	
	public static void main(String[] args) {
		/**
		 * 单精度 和 双精度区别：
		 * 1、表示的数值范围不同。
		 * 2、所占用的内存空间不同。
		 * 3、小数点后保留的有效位是不同的（double有效位精确高）
		 */
		//特点：所有的小数常量值，系统默认的都是double类型。
		//float  a = 12.55;
		
		//想表示一个标准的float类型，可以在值的后面添加一个f或F，建议大家写 F
		float  a = 12.555544443333F;   //保留的小数点后  6位
		System.out.println(a);
		double  b = 12.55554444333322221111; //保留的小数点后的 15位
		System.out.println(b);
		//科学计数法
		double  c = 12.5E10;
		System.out.println(c);
		//强制转换后，精度会丢失
		float  x = (float) b;
		System.out.println(x);
		double  xx = .25;  //0.25
	}
}

package com.it.www.test;
/**
 * char  和  boolean类型的讲解
 * @author Administrator
 */
public class Demo4 {
	public static void main(String[] args) {
		  char   a = 'a';
		  char  b = '中';
		  char  c = '1'; 
		  char  e =' ';  
		   //char  f = '';   错误的	  
		  char  a1 = '\n';  //特殊字符，还是字符。	  
		  //char  b1 = 'ab';  错的  
		  System.out.println(a);
		  System.out.println(b);
		  System.out.println(c);
		  System.out.println(d);
		  System.out.println(e);
		  
		  System.out.println("----------------------------------");
		  //字符型-----会对应一个 ASCII码值。 97--'a'
		  char  c1 = 97;
		  System.out.println(c1);  //a
		  
		  char  d1 = 65;
		  System.out.println(d1);  //A
		  
		  //ASCII码值的范围：  0~~~65535
		  char  x = 'a';
		  char result = (char) (x+1);
		  System.out.println(result);
		  
		  
		  boolean  bb1 = true;  //成立  ，  真的
		  
		  bb1 = false; //不成立  ， 假的
	
	}
}
